#!/usr/bin/env php
<?php

chdir(dirname(__DIR__));

require_once 'vendor/autoload.php';

if (!class_exists('React\Http\Server')) {
    echo 'You must install react/http to use this server', PHP_EOL;
    exit(1);
}

$container = new StatisticalClassifierServiceContainer();
$container->set(
    'index.index',
    new Camspiers\StatisticalClassifier\Index\Index()
);

$classifiers = array();
$indexes = array();

$loop = React\EventLoop\Factory::create();
$socket = new React\Socket\Server($loop);

$http = new React\Http\Server($socket);
$http->on(
    'request',
    function ($request, $response) use (
        $container,
        &$classifiers,
        &$indexes
    ) {

    $query = $request->getQuery();
    $path = $request->getPath();

    switch ($path) {
        case '/classify':
        case '/classify/':

            if (isset($query['index'])) {

                $classifierType = isset($query['classifier']) ? $query['classifier'] : 'classifier.naive_bayes';

                if (!isset($classifiers[$classifierType])) {
                    $classifiers[$classifierType] = $container->get($classifierType);
                }

                if (!isset($indexes[$query['index']]) || (isset($query['fresh']) && $query['fresh'])) {
                    $indexes[$query['index']] = new Camspiers\StatisticalClassifier\Index\CachedIndex(
                        $query['index'],
                        $container->get('cache')
                    );
                }

                $classifiers[$classifierType]->setIndex($indexes[$query['index']]);

                $response->writeHead(
                    200,
                    array(
                        'Content-Type' => 'application/json'
                    )
                );

                if (isset($query['document'])) {

                    $response->end(
                        json_encode(
                            array(
                                'category' => $classifiers[$classifierType]->classify($query['document'])
                            )
                        )
                    );

                } else {

                    $request->on('data', function ($document) use (
                        $response,
                        $classifiers,
                        $classifierType
                    ) {

                        $response->end(
                            json_encode(
                                array(
                                    'category' => $classifiers[$classifierType]->classify($document)
                                )
                            )
                        );

                    });

                }

            } else {

                $response->writeHead(400, array('Content-Type' => 'text/plain'));
                $response->end('Error');

            }
            break;

        default:
            $response->writeHead(400, array('Content-Type' => 'text/plain'));
            $response->end('Bad request');
            break;
    }

});

$socket->listen(1337);
$loop->run();

