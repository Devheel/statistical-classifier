{"name":"PHP Statistical Classifier","tagline":"A PHP implementation of a Naive Bayes statistical classifier, including a structure for building other classifiers, multiple data sources and multiple caching backends.","body":"[![Build Status](https://travis-ci.org/camspiers/statistical-classifier.png?branch=master)](https://travis-ci.org/camspiers/statistical-classifier)\r\n\r\nCurrently this project is at [major version 0](http://semver.org/) so the public API should not be considered stable.\r\n\r\n# What is statistical classification?\r\n\r\n> In machine learning and statistics, classification is the problem of identifying to which of a set of categories (sub-populations) a new observation belongs, on the basis of a training set of data containing observations (or instances) whose category membership is known. - [Wikipedia - Statistical Classification](http://en.wikipedia.org/wiki/Statistical_classification)\r\n\r\nThis library provides a statistical classifier written entirely in PHP. The project is written with a focus on reuse and customaizability. Using dependancy injection and interfaces, all components can be easily swapped out for your own version, or entirely new classifiers can be built.\r\n\r\nBy default a Naive Bayes classifier is provided which performs well on the [20 Newsgroups Data Set](http://qwone.com/~jason/20Newsgroups/). This classifier was built using a paper *[Tackling the Poor Assumptions of Naive Bayes Text Classifiers](resources/Tackling the Poor Assumptions of Naive Bayes Text Classifiers.pdf?raw=true)* by Jason Rennie (PDF).\r\n\r\n# Installation (with composer)\r\n## For your application\r\n\r\n    $ composer requre camspiers/statistical-classifier:~0.2\r\n\r\n## For command-line use\r\n\r\n    $ composer create-project camspiers/statistical-classifier .\r\n    $ ln -s $PWD/bin/classifier /usr/local/bin/classifier\r\n\r\n# Overview\r\n\r\nA classifier is built using the following component types:\r\n\r\n| Component | Interface | Description |\r\n| --------- | --------- | ----------- |\r\n| Generic Classifier | ClassifierInterface | Acts as a base that other components are added to to build a classifier |\r\n| Data Source | DataSourceInterface | Multiple available, they provide the raw training data to the classifier |\r\n| Index | IndexInterface | This stores the results of each transform and is eventually the thing that is cached |\r\n| Normalizer | NormalizerInterface | Takes an array of words and makes them more consistent, for example, lowercase, porter stemmed |\r\n| Tokenizer | TokenizerInterface | Breaks up a string into tokens |\r\n| Transforms | TransformInterface | Manipulates the Index to produce data ready for a classification rule |\r\n| Classification rule | ClassificationRuleInterface | Uses the index prepared by the transforms and the data source to classify a document |\r\n\r\n# Dependancy injection (Symfony)\r\n\r\nThis library uses Symfony's dependancy injection component. A [container extension](http://symfony.com/doc/2.1/components/dependency_injection/compilation.html) is provided, and a container is also provided so if you aren't already using Symfony's dependancy injection component you can still take advantage of the default services provided.\r\n\r\n# Usage\r\n## From within external PHP code\r\n### Without Symfony Dependency Injection\r\n\r\n```php\r\n<?php\r\n// Ensure composer autoloader is required\r\nuse Camspiers\\StatisticalClassifier;\r\n$c = new Classifier\\NaiveBayes(\r\n    new Index\\Index(\r\n        new DataSource\\DataArray(\r\n            array(\r\n                'spam' => array(\r\n                    'Some spam document',\r\n                    'Another spam document'\r\n                ),\r\n                'ham' => array(\r\n                    'Some ham document',\r\n                    'Another ham document'\r\n                )\r\n            )\r\n        )\r\n    ),\r\n    new Tokenizer\\Word(),\r\n    new Normalizer\\Lowercase()\r\n);\r\n$c->is('ham', 'Some ham document'); // true\r\necho $c->classify('Some ham document'), PHP_EOL; // ham\r\n```\r\n\r\n### With Symfony Dependency Injection\r\n\r\n```php\r\n<?php\r\n// Ensure composer autoloader is required\r\n$c = new StatisticalClassifierServiceContainer;\r\n// Using a plain data array source for simplicity\r\nuse Camspiers\\StatisticalClassifier\\DataSource\\DataArray;\r\nuse Camspiers\\StatisticalClassifier\\Index\\Index;\r\n// This sets the index to the soon created classifier using a synthetic symfony service\r\n$c->set(\r\n    'index.index',\r\n    new Index(\r\n        $source = new DataArray(\r\n            array(\r\n                'spam' => array(\r\n                    'Some spam document'\r\n                ),\r\n                'ham' => array(\r\n                    'Some ham document'\r\n                )\r\n            )\r\n        )\r\n    )\r\n);\r\n$source->addDocument('spam', 'Another spam document');\r\n$source->addDocument('ham', 'Another ham document');\r\necho $c->get('classifier.naive_bayes')->classify(\"Some ham document\"), PHP_EOL; //ham\r\n```\r\n\r\n## Command-line executable\r\n### Commands\r\n\r\n*train:document*\r\n\r\n```\r\nUsage:\r\n train:document index category document\r\n\r\nArguments:\r\n index                 Name of index\r\n category              Which category this data is\r\n document              The document to train on\r\n```\r\n\r\n*train:directory*\r\n\r\n```\r\nUsage:\r\n train:directory [-i|--include[=\"...\"]] index directory\r\n\r\nArguments:\r\n index                 Name of index\r\n directory             The directory to train on\r\n```\r\n\r\n*train:pdo*\r\n\r\n```\r\nUsage:\r\n train:pdo index category column query dsn [username] [password]\r\n\r\nArguments:\r\n index                 Name of index\r\n category              Which category this data is\r\n column                Which column to select\r\n query                 The query to run\r\n dsn                   The dsn to use\r\n username              The username to use\r\n password              The password to use\r\n```\r\n\r\n*index:create*\r\n\r\n```\r\nUsage:\r\n index:create index\r\n\r\nArguments:\r\n index                 Name of index\r\n```\r\n\r\n*index:remove*\r\n\r\n```\r\nUsage:\r\n index:remove index\r\n\r\nArguments:\r\n index                 Name of index\r\n```\r\n\r\n*index:prepare*\r\n\r\n```\r\nUsage:\r\n index:prepare index\r\n\r\nArguments:\r\n index                 Name of index\r\n```\r\n\r\n*classify*\r\n\r\n```\r\nUsage:\r\n classify index document\r\n\r\nArguments:\r\n index                 Name of index\r\n document              The document to classify\r\n```\r\n\r\n### Example\r\n\r\n```bash\r\n$ classifier train:document MyIndexName spam \"This is some spam\"\r\n$ classifier train:document MyIndexName ham \"This is some ham\"\r\n$ classifier classify MyIndexName \"Some spam\"\r\n```\r\n\r\n# Unit testing\r\n\r\n    statistical-classifier/ $ composer install --dev\r\n    statistical-classifier/ $ vendor/bin/phpunit\r\n\r\n# Internals\r\n## Classifiers\r\n\r\n* Generic Classifier\r\n* Naive Bayes Classifier\r\n\r\n## Data Sources\r\n\r\n* DataArray\r\n* Directory\r\n* Json\r\n* PDO\r\n* PDOQuery\r\n* Serialized\r\n\r\n## Index\r\n\r\n* Index\r\n* CachedIndex\r\n\r\n## Normalizers\r\n\r\n* Lowercase\r\n* Porter\r\n* Stopword\r\n\r\n## Tokenizers\r\n\r\n* Word\r\n\r\n## Tranforms\r\n\r\n* Complement\r\n* DC\r\n* DL\r\n* DocumentTokenCounts\r\n* DocumentTokenSums\r\n* IDF\r\n* Prune\r\n* TAC\r\n* TBC\r\n* TCBD\r\n* TF\r\n* TFIDF\r\n* TFThreaded\r\n* TransformInterface\r\n* Weight\r\n* WeightNormalization\r\n\r\n## Classification Rules\r\n\r\n* NaiveBayes\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}